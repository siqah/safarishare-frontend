import React, { useState, useEffect } from 'react';import { Link, useLocation, useNavigate } from 'react-router-dom';import { Car, MessageSquare, Bell, Menu, X } from 'lucide-react';import { useAuth, UserButton } from '@clerk/clerk-react';import { useAuthStore } from '../../stores/authStore';import { useNotificationStore, setupNotificationListener } from '../../stores/notificationStore';import NotificationDropdown from '../Notifications/NotificationDropdown';import { socketService } from '../../lib/socket';const Header: React.FC = () => {  const location = useLocation();  const navigate = useNavigate();  const [showMobileMenu, setShowMobileMenu] = useState(false);  const [showNotifications, setShowNotifications] = useState(false);  const { isSignedIn, signOut } = useAuth();  const { user } = useAuthStore();  const { unreadCount, fetchNotifications } = useNotificationStore();  useEffect(() => {    if (user) {      socketService.connect(user._id);      fetchNotifications();      setupNotificationListener(user._id);    } else {      socketService.disconnect();    }  }, [user, fetchNotifications]);  useEffect(() => {    setShowNotifications(false);    setShowMobileMenu(false);  }, [location.pathname]);  const isActive = (path: string) => location.pathname === path;  const dashboardPath = user?.isDriver ? '/driver/dashboard' : '/rider/dashboard';  return (    <header className="bg-white shadow-sm border-b border-gray-200 sticky top-0 z-50">      <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">        <div className="flex justify-between items-center h-16">          <Link to={user ? dashboardPath : '/'} className="flex items-center space-x-2">            <div className="bg-blue-600 p-2 rounded-lg">              <Car className="w-6 h-6 text-white" />            </div>            <span className="text-xl font-bold text-gray-900">SafariShare</span>          </Link>          <nav className="hidden md:flex space-x-8">            <Link to="/search" className={`${isActive('/search') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors`}>              Search Rides            </Link>            {user && (              <>                {user.isDriver && (                  <>                    <Link to="/offer" className={`${isActive('/offer') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors`}>                      Offer Ride                    </Link>                    <Link to="/my-rides" className={`${isActive('/my-rides') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors`}>                      My Rides                    </Link>                    <Link to="/booking-requests" className={`${isActive('/booking-requests') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors`}>                      Requests                    </Link>                  </>                )}                {!user.isDriver && (                  <Link to="/my-bookings" className={`${isActive('/my-bookings') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors`}>                    My Bookings                  </Link>                )}                <Link to="/messages" className={`${isActive('/messages') ? 'text-blue-600 bg-blue-50' : 'text-gray-700 hover:text-blue-600 hover:bg-gray-50'} px-3 py-2 text-sm font-medium rounded-md transition-colors relative`}>                  <MessageSquare className="w-5 h-5" />                </Link>              </>            )}          </nav>          <div className="flex items-center space-x-4">            {user && (              <div className="relative">                <button                  onClick={() => setShowNotifications(!showNotifications)}                  className="p-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-md transition-colors relative"                >                  <Bell className="w-5 h-5" />                  {unreadCount > 0 && (                    <span className="absolute -top-1 -right-1 bg-red-500 text-white text-xs rounded-full w-5 h-5 flex items-center justify-center">                      {unreadCount > 9 ? '9+' : unreadCount}                    </span>                  )}                </button>                {showNotifications && (                  <NotificationDropdown                     isOpen={showNotifications}                    onClose={() => setShowNotifications(false)}                   />                )}              </div>            )}            {isSignedIn ? (              <div className="flex items-center space-x-3">                <UserButton                   appearance={{                    elements: {                      avatarBox: "w-8 h-8"                    }                  }}                />                {user && (                  <span className="text-sm text-gray-700">                    {user.firstName} {user.lastName}                  </span>                )}              </div>            ) : (              <div className="flex items-center space-x-3">                <Link to="/sign-in" className="text-gray-700 hover:text-blue-600 px-3 py-2 text-sm font-medium">                  Sign In                </Link>                <Link to="/sign-up" className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 text-sm font-medium rounded-md">                  Sign Up                </Link>              </div>            )}            <button              onClick={() => setShowMobileMenu(!showMobileMenu)}              className="md:hidden p-2 text-gray-600 hover:text-blue-600 hover:bg-gray-50 rounded-md"            >              {showMobileMenu ? <X className="w-5 h-5" /> : <Menu className="w-5 h-5" />}            </button>          </div>        </div>        {/* Mobile menu */}        {showMobileMenu && (          <div className="md:hidden border-t border-gray-200 py-4">            <div className="space-y-2">              <Link to="/search" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                Search Rides              </Link>              {user && (                <>                  {user.isDriver && (                    <>                      <Link to="/offer" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                        Offer Ride                      </Link>                      <Link to="/my-rides" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                        My Rides                      </Link>                      <Link to="/booking-requests" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                        Requests                      </Link>                    </>                  )}                  {!user.isDriver && (                    <Link to="/my-bookings" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                      My Bookings                    </Link>                  )}                  <Link to="/messages" className="block px-3 py-2 text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                    Messages                  </Link>                  <Link to="/settings" className="block px-3 py-2 text-sm text-sm text-gray-700 hover:text-blue-600 hover:bg-gray-50 rounded-md">                    Settings                  </Link>                </>              )}            </div>          </div>        )}      </div>    </header>  );};export default Header;